const yaml = require('js-yaml');
const { send_message, send_attachment } = require('./signal_api');
const { set_user_status } = require('./graphql');


/* 
The function below is the implementation of the parse function in the rhyzal_parser.spec.js file
The function takes in three parameters: yaml_script, step, and vars
  yaml_script:  the yaml script that contains the messages to be sent
  step: the step in the yaml script to be executed
  vars: variables to be replaced in the messages, these are generated by a graphql query with the same name as the script
The function parses the yaml script, replaces the variables in the messages, and sends the messages using the send_message and send_attachment functions
*/
class RhyzalParser {

    constructor(yaml_script) {
        let script_obj;
        try {
            script_obj = yaml.load(yaml_script);
        }
        catch (e) {
            throw new Error('Invalid yaml input ' + e);
        }
        this.script = script_obj.script;
    }

    send(step, vars) {
            if (!this.script) {
                throw new Error('Script not initialized');
            }
            if (!this.script[step]) {
                throw new Error('Step missing from script');
            }
            const messages = this.script[step].send;

            for (let i = 0; i < messages.length; i++) {
                if (messages[i].match(/attach\(([^)]+)\)/)) {
                    const file = messages[i].match(/attach\(([^)]+)\)/)[1];
                    send_attachment(file);
                } else {
                    let message = messages[i];
                    for (const key in vars) {
                        message = message.replace(new RegExp(`{{${key}}}`, 'g'), vars[key]);
                    }
                    send_message(message);
                }
            }
    }

    receive(step, vars) {
            if (!this.script[step]) {
                throw new Error('Step missing from script');
            }
            const on_receive = this.script[step].on_receive;
            this.evaluate_receive(on_receive, vars);

    }

    evaluate_receive(script, vars) {
        console.log('Evalutating receive:', script);
        switch(Object.keys(script)[0]) {
            case 'user_status':
                set_user_status(vars.user_id, script['user_status']);
                break;
        }
    }

}

module.exports = RhyzalParser;